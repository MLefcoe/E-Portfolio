---
title: "Code Snippets"
execute: 
  eval: false
---

# Code Snippets

### Shade simulation function in R

```{r, eval=FALSE}
#library(suncalc)
#library(rayshader)
#library(terra)

#### Setup time intervals and sun positions

#start <-  as.POSIXct("2024-07-17 01:00:00", tz = "America/Los_Angeles")
#end <-  as.POSIXct("2024-07-18 00:00:00", tz = "America/Los_Angeles")

#times <- data.frame(dates = seq(start, end, "hour"))

#sun_pos <- getSunlightPosition(date = times$dates, lat = 49.2827, lon = -123.1207)

shade_sim <- function(pc, sun_calc,name){   #take a LiDAR point cloud,
  alt <- sun_calc$altitude*(180/pi)         #a table of sun positions,
  azim <- sun_calc$azimuth*(180/pi)         #and output file name as inputs
  
  if(alt >= 0){
    dsm <- rasterize_canopy(pc, dsmtin(), res = 2) %>%    #create and shade a dsm
      raster_to_matrix() %>% 
      ray_shade(sunaltitude = alt, sunangle = azim) %>% 
      rast()
  
    writeRaster(dsm, name, overwrite = TRUE)   #write out the result
  }
}

```

### Create 3D interactive plot from LiDAR using Rayshader and Tree3d in R

Morgan-Wall T (2025). *rayshader: Create Maps and Visualize Data in 2D and 3D*. R package version 0.38.10, https://github.com/tylermorganwall/rayshader, [https://www.rayshader.com](https://www.rayshader.com/).

[https://github.com/tylermorganwall/tree3dhttps://github.com/tylermorganwall/tree3d](https://github.com/tylermorganwall/tree3d)

```{r, eval=FALSE}
#library(lidR)
#library(sf)
#library(terra)
#library(tree3d)
#library(rayshader)
#library(png)
#library(rgl)

#Load in data 

#lasFile <- readLAScatalog("C:/Users/mlefcoe.stu/OneDrive - UBC/Documents/FCOR599/Shade Mapping/LiDAR Vancouver 2022 - UBC Campus/All_LAS", filter = "-keep first")

#buildings <- st_read("C:/Users/mlefcoe.stu/OneDrive - UBC/Documents/FCOR599/Shade Mapping/building_polygons.shp", promote_to_multi = FALSE)

#Set up region of interest

las <- clip_rectangle(lasFile, 481808.5,5456316.8, 482134.3, 5456601.2)

pt4 <- st_point(c(481808.5,5456316.8), dim = "XY")
pt3 <- st_point(c(481808.5, 5456601.2), dim = "XY")
pt2 <- st_point(c(482134.3, 5456316.8), dim = "XY")
pt1 <- st_point(c(482134.3,5456601.2), dim = "XY")
pts <- c(pt1,pt2,pt3,pt4)

buildings <- st_crop(buildings,st_bbox(pts))
buildings <- st_cast(buildings, to = "POLYGON")

#Seperate tree from non-tree
veg <- filter_poi(las, Classification == LASHIGHVEGETATION)

#Tree segmentation for convex hull (2d)
tindiv <- segment_trees(veg, algorithm = li2012(R = 3, speed_up = 5))
metrics <- crown_metrics(tindiv, .stdtreemetrics, geom = "convex")

#rayshader prep and get locations, heights and extent
dsm <- rasterize_terrain(las, algorithm = tin())
dsm_matrix <- raster_to_matrix(dsm)
ttops <- locate_trees(veg, lmf(ws = 5))
tree_locations <- st_coordinates(ttops)
dsm_extent <- ext(dsm)
extent_vals <- dsm_extent@ptr$vector
loc_metrics <- st_intersects(ttops, metrics$geometry)

#get tree widths
widths <- c()
for(i in 1:580){
  index <- loc_metrics[[i]][1]
  radius <- sqrt(metrics$convhull_area[index]/pi)
  widths <- c(widths, radius)
}

#Overlay street names
overlay_img <- png::readPNG("C:/Users/mlefcoe.stu/Documents/Shade_Mapping_R/Outputs/basemap_real.png")

#3D Digital Elevation Model
height_shade(dsm_matrix) %>%
  add_overlay(overlay_img) %>% 
  add_shadow(texture_shade(dsm_matrix),0.2) %>% 
  add_shadow(lamb_shade(dsm_matrix),0) %>% 
  plot_3d(dsm_matrix, background = "lightblue",
          zoom = 0.33)

#Render trees
render_tree(lat = tree_locations[,2], 
            long = tree_locations[,1], 
            absolute_height = TRUE, 
            crown_width = widths,
            tree_height = tree_locations[,3],
            trunk_height_ratio = 0.2 + 0.1*runif(nrow(tree_locations)),
            crown_color = "#00aa00",
            type = "cone",
            extent = dsm_extent, 
            heightmap = dsm_matrix,
            clear_previous = TRUE,
            min_height = 8)

#Render Forest Sciences Center
render_buildings(buildings[c(9,15),],
                 extent = dsm_extent,
                 heightmap = dsm_matrix,
                 material = "burlywood4",
                 roof_material = "darkolivegreen",
                 roof_height = 15,
                 angle = 10)

#Render other buildings
render_buildings(buildings[-9,],
                 extent = dsm_extent,
                 heightmap = dsm_matrix,
                 material = "brown",
                 roof_material = "grey27",
                 roof_height = 10,
                 angle = 10)

#Change lighting
rgl::pop3d("lights")
rgl::light3d(phi=35,theta=90, viewpoint.rel=F, diffuse="#ffffff", specular="#000000")
rgl::light3d(phi=-45,theta=-40, viewpoint.rel=F, diffuse="#aaaaaa", specular="#000000")

rgl::rglwidget()

```

### Isolate center tree from a LiDAR point cloud

```{r, eval = FALSE}
#Load in 764 segmented point clouds
path <- (list.files("Outputs/Species Level/las_clipped", full.names = TRUE))

rois <- list()
for(i in 1:length(path)){
  rois[[i]] <- readLAS(path[i])
}

#Point clouds are circular regions clipped from larger file. This allowed for the center coordinates to be included in the filename and used in isolating the central tree below
roi_indiv <- list()
for(i in 1:764){
#generate metrics as a table of treeIDs and coordinates
metrics <- crown_metrics(rois[[i]], ~list(z_max = max(Z), z_mean = mean(Z)))

#use filename to create point geometries in the center of the plot
test_centroid <- str_extract(path[i], 
                 "[:digit:]{6}\\.[:digit:]{1}\\_[:digit:]{7}|[:digit:]{6}\\_[:digit:]{7}") %>%
  str_replace("_", ", ") %>%
  str_split("\\,\\s",2) %>%
  unlist() %>%
  as.numeric() %>%
  st_point() %>%
  st_geometry()

st_crs(test_centroid) <- 26910
  
#add new row to metrics table that contains distance from tree to center
new_metrics <- mutate(metrics, dist = st_distance(metrics, test_centroid))
  
#central tree is the tree with the shortest distance to the centroid
center_tree <- filter(new_metrics, dist == min(dist))
  
#assign it back out to a list
roi_indiv[[i]] <- filter_poi(rois[[i]], treeID == center_tree$treeID)
}
```

### Arcpy Script for Shade Percentage Analysis

``` python
#Loop georeference function through each folder, georeference shade simulation outputs
og_path = r"C:\Users\mlefcoe.stu\Documents\Shade_Mapping_R\Outputs\Neighbourhood Level"
control_path = r"C:\Users\mlefcoe.stu\Documents\Shade_Mapping_R\Inputs\Control_Points"
ras_folders = os.listdir(og_path)

for i in range(len(ras_folders)):
    georefer(directory = og_path + "\\" + ras_folders[i], out_name =
    ras_folders[i][:ras_folders[i].index(" ")], link = control_path + "\\" +
    ras_folders[i][:ras_folders[i].index("_")] + ".txt")


#Define function to reclassify all shade rasters in a folder
def slicer(directory, out_name):
    count = 0
    ras_files = os.listdir(directory)
    for i in range(len(ras_files)):
        if ras_files[i].endswith(".tif"):
            ras = directory + "\\" + ras_files[i]
            out_slice = arcpy.sa.Slice(in_raster=ras, number_zones=3, 
            slice_type = "NATURAL_BREAKS")
            out_slice.save(directory + "\\" + out_name + "reclassed" + 
            str(count) + ".tif")
            count = count + 1

#Loop reclassing functions through folders
og_path = r"C:\Users\mlefcoe.stu\Documents\Shade_Mapping_R\Outputs\Neighbourhood Level"
ras_folders = os.listdir(og_path)

for i in range(len(ras_folders)):
    slicer(directory = og_path + "\\" + ras_folders[i], 
    out_name=ras_folders[i][:ras_folders[i].index(" ")])

#Define function to extract shade from all shade rasters in a folder
def extract_shade(directory, out_name):
    count = 0
    ras_files = os.listdir(directory)
    for i in range(len(ras_files)):
        if ras_files[i].endswith("reclassed" + str(count) + ".tif"):
            ras = directory + "\\" + ras_files[i]
            attextract = arcpy.sa.ExtractByAttributes(in_raster = ras,
            where_clause = "VALUE = 1")
            attextract.save(directory + "\\" + out_name + "extracted" + 
            str(count) + ".tif")
            count = count + 1
    count = 10
    for i in range(len(ras_files)):
        if ras_files[i].endswith("reclassed" + str(count) + ".tif"):
            ras = directory + "\\" + ras_files[i]
            attextract = arcpy.sa.ExtractByAttributes(in_raster = ras,
            where_clause = "VALUE = 1")
            attextract.save(directory + "\\" + out_name + "extracted" + 
            str(count) + ".tif")
            count = count + 1

#Loop extracting function through each folder
og_path = r"C:\Users\mlefcoe.stu\Documents\Shade_Mapping_R\Outputs\Neighbourhood Level"
ras_folders = os.listdir(og_path)

for i in range(len(ras_folders)):
    extract_shade(directory = og_path + "\\" + ras_folders[i], 
    out_name=ras_folders[i][:ras_folders[i].index(" ")])

#Define a function to convert shade rasters in a folder to polygons
def ras_to_poly(directory, out_name):
    count = 0
    ras_files = os.listdir(directory)
    for i in range(len(ras_files)):
        if ras_files[i].endswith("extracted" + str(count) + ".tif"):
            ras = directory + "\\" + ras_files[i]
            arcpy.conversion.RasterToPolygon(in_raster=ras, 
            out_polygon_features = directory + "\\" + out_name + "shade_poly" +
            str(count) + ".shp")
            count = count + 1
    count = 10
    ras_files = os.listdir(directory)
    for i in range(len(ras_files)):
        if ras_files[i].endswith("extracted" + str(count) + ".tif"):
            ras = directory + "\\" + ras_files[i]
            arcpy.conversion.RasterToPolygon(in_raster=ras, 
            out_polygon_features = directory + "\\" + out_name + "shade_poly" +
            str(count) + ".shp")
            count = count + 1

#Loop polyshade function through all folders
og_path = r"C:\Users\mlefcoe.stu\Documents\Shade_Mapping_R\Outputs\Neighbourhood Level"
ras_folders = os.listdir(og_path)
ras_folders

for i in range(len(ras_folders)):
    ras_to_poly(directory = og_path + "\\" + ras_folders[i], 
    out_name=ras_folders[i][:ras_folders[i].index(" ")])

#Define a function to interesect each shade raster in a folder with a specified feature class
def intersector(directory, out_name, feature):
    count = 0
    ras_files = os.listdir(directory)
    for i in range(len(ras_files)):
        if ras_files[i].endswith("poly" + str(count) + ".shp"):
            ras = directory + "\\" + ras_files[i]
            arcpy.analysis.PairwiseIntersect(in_features = [feature, ras],
            out_feature_class = directory + "\\" + out_name + "intersected" +
            str(count))
            count = count + 1
    count = 10
    for i in range(len(ras_files)):
        if ras_files[i].endswith("poly" + str(count) + ".shp"):
            ras = directory + "\\" + ras_files[i]
            arcpy.analysis.PairwiseIntersect(in_features = [feature, ras],
            out_feature_class = directory + "\\" + out_name + "intersected" +
            str(count))
            count = count + 1

#Loop the intersection function through each folder
for i in range(len(ras_folders)):
    intersector(directory = og_path + "\\" + ras_folders[i], 
    out_name = ras_folders[i][:ras_folders[i].index(" ")], 
    feature = r"C:\Users\mlefcoe.stu\OneDrive - UBC\Documents\FCOR599\Shade         Mapping\building_polygons.shp")
```
